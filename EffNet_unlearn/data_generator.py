import PIL
import os
import glob
import shutil
import sys
import numpy as np
from skimage.io import imread
import matplotlib.pyplot as plt
import pandas as pd
from PIL import Image, ImageFile
from efficientnet.keras import center_crop_and_resize, preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf


ImageFile.LOAD_TRUNCATED_IMAGES = True


'''
Function: data generator for train validation Set
'''
## Function⚙️ Aug : Main Batch with Label
def batch_datagen(df, input_shape, BATCH_SIZE):
    '''
    df         : dataFrame train set, or ,test set
    input_shape: input_shape from EffNet-B5 model
    BATCH_SIZE : batch fro call data to train each epoch 
    '''
    #####***Augmeantation: main batch
    batch_datagen_main = ImageDataGenerator(
                      rescale=1./255,
                      rotation_range=30,
                      width_shift_range=0.2,
                      height_shift_range=0.2)

    batch_generator_main = batch_datagen_main.flow_from_dataframe(
                            dataframe = df,
                            directory = None,
                            x_col = 'img_path',
                            y_col = None,
                            target_size = (input_shape[0], input_shape[1]),
                            batch_size=BATCH_SIZE,
                            color_mode= 'rgb',
                            class_mode= None,
                            seed=32,
                            shuffle=False)

    #####***Augmeantation: batch 2
    batch_datagen_2 = ImageDataGenerator(
                      rescale=1./255,
                      rotation_range=50,
                      width_shift_range=0.5,
                      height_shift_range=0.5)

    batch_generator_2 = batch_datagen_2.flow_from_dataframe(
                        dataframe = df,
                        directory = None,
                        x_col = 'img_path',
                        y_col = 'cls',
                        target_size = (input_shape[0], input_shape[1]),
                        batch_size=BATCH_SIZE,
                        color_mode= 'rgb',
                        class_mode='binary',
                        seed=32,
                        shuffle=False)
    
    return batch_generator_main, batch_generator_2





## Function ⚙️ Aug: Flip_generator with Label (all Batch)
def Flip_generator(batch_generator_main, batch_generator_2, IMAGE_SIZE):
    """Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_x, batch_y = next(batch_generator_2)
        batch_x_main = next(batch_generator_main)
        batch_Flip = np.zeros((batch_x.shape[0], IMAGE_SIZE, IMAGE_SIZE, 3))
        batch_main = np.zeros((batch_x_main.shape[0], IMAGE_SIZE, IMAGE_SIZE, 3))
        batch_label = np.zeros((batch_y.shape[0], ))
        for i in range(batch_x.shape[0]):
            if batch_y[i] == 0.0:
                batch_Flip[i] = tf.image.flip_left_right(batch_x[i]) 
                batch_main[i] = batch_x_main[i] 
                batch_label[i] = batch_y[i]
            else:
                batch_Flip[i] = batch_x[i] 
                batch_main[i] = batch_x_main[i] 
                batch_label[i] = batch_y[i]
    
        yield ([batch_main, batch_Flip], batch_label)


